<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Virtual_Controller" Id="{d0ba9c6c-7d3e-4323-b5d3-7214c329989f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Virtual_Controller IMPLEMENTS I_ControlBox
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Joy_Normalized" Id="{3e2741d1-0d8e-4ce8-a284-f4fb2725cbd9}">
      <Declaration><![CDATA[METHOD Joy_Normalized : REAL
VAR_INPUT
	// Joy X
	fJoyX_raw : LREAL;
	// Joy Y
	fJoyY_raw : LREAL;
	
	// Min/max in/out parameters
	fMin_in : LREAL;
	fMax_in : LREAL;
	fMin_out : REAL;
	fMax_out : LREAL;
END_VAR
VAR_OUTPUT
	fJoyX_normalized : LREAL;
	fJoyY_normalized : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
fJoyX_normalized := (fJoyX_raw - fMin_in) * (fMax_out - fMin_out) / (fMax_in - fMin_in) + fMin_out;
fJoyY_normalized := (fJoyY_raw - fMin_in) * (fMax_out - fMin_out) / (fMax_in - fMin_in) + fMin_out;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Mode" Id="{0348c339-14fd-4a74-9b6e-3dbe81445505}">
      <Declaration><![CDATA[METHOD Mode
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE G_ControlBox.eMode OF
		E_Control_Mode.OFF:
			IF G_ControlBox.bAuto THEN
				G_ControlBox.eMode := E_Control_Mode.AUTO;
			ELSIF G_ControlBox.bManual THEN
				G_ControlBox.eMode := E_Control_Mode.MANUAL;
			ELSE
				G_ControlBox.eMode := E_Control_Mode.OFF;
			END_IF
		E_Control_Mode.AUTO:
			IF G_ControlBox.bManual THEN
				G_ControlBox.eMode := E_Control_Mode.MANUAL;
			ELSIF NOT G_ControlBox.bAuto THEN
				G_ControlBox.eMode := E_Control_Mode.OFF;
			ELSE
				G_ControlBox.eMode := E_Control_Mode.AUTO;
			END_IF
			G_ControlBox.bManual := FALSE;
		E_Control_Mode.MANUAL:
			IF G_ControlBox.bAuto THEN
				G_ControlBox.eMode := E_Control_Mode.AUTO;
			ELSIF NOT G_ControlBox.bManual THEN
				G_ControlBox.eMode := E_Control_Mode.OFF;
			ELSE
				G_ControlBox.eMode := E_Control_Mode.MANUAL;
			END_IF
			G_ControlBox.bAuto := FALSE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Sim" Id="{a8f5f6a0-4399-408c-a1da-dac58afdecaf}">
      <Declaration><![CDATA[METHOD Sim
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF G_ControlBox.eStatus = E_Status.RUNNING THEN
	IF G_ControlBox.fJoyX_Normalized > 0 AND G_Sim.nX < G_Sim.xMax THEN
		G_Sim.nX := G_Sim.nX+1;
	END_IF
	IF G_ControlBox.fJoyX_Normalized < 0 AND G_Sim.nX > G_Sim.xMin THEN
		G_Sim.nX := G_Sim.nX-1;
	END_IF
	IF G_ControlBox.fJoyY_Normalized > 0 AND G_Sim.nY < G_Sim.yMax THEN
		G_Sim.nY := G_Sim.nY+1;
	END_IF
	IF G_ControlBox.fJoyY_Normalized < 0 AND G_Sim.nY > G_Sim.yMin THEN
		G_Sim.nY := G_Sim.nY-1;
	END_IF	
ELSE
	G_ControlBox.fJoyX_Normalized := 0;
	G_ControlBox.fJoyY_Normalized := 0;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Status" Id="{a1ecf13f-901f-4e5c-9e12-ccc122ee8179}">
      <Declaration><![CDATA[METHOD Status : E_Status
VAR_OUTPUT
	eStatus : E_Status := E_Status.NOTREADY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE G_ControlBox.eStatus OF
	E_Status.NOTREADY:
		IF NOT(G_ControlBox.eMode = E_Control_Mode.OFF) THEN 
			G_ControlBox.eStatus := E_Status.READY;
		ELSE
			G_ControlBox.eStatus := E_Status.NOTREADY;
		END_IF
	E_Status.READY:
		IF NOT(G_ControlBox.bAuto OR G_ControlBox.bManual) THEN
			G_ControlBox.eStatus := E_Status.NOTREADY;
		ELSE
			G_ControlBox.eStatus := E_Status.READY;
		END_IF
		IF	G_ControlBox.bStart THEN
			G_ControlBox.eStatus := E_Status.STARTING;
		END_IF
	E_Status.STARTING:
		G_ControlBox.bStartTimer := TRUE;
		G_ControlBox.fbTon(IN:=G_ControlBox.bStartTimer, PT:=T#2S, Q => G_ControlBox.bTimerDone);
		G_ControlBox.bStartTimer := FALSE;
		IF G_ControlBox.bTimerDone THEN
			IF G_ControlBox.eMode = E_Control_Mode.MANUAL OR G_ControlBox.eMode = E_Control_Mode.AUTO THEN
				G_ControlBox.eStatus := E_Status.RUNNING;
			ELSE
				G_ControlBox.eStatus := E_Status.STOPPING;
			END_IF
		G_ControlBox.fbTon(IN:=G_ControlBox.bStartTimer, PT:=T#2S, Q => G_ControlBox.bTimerDone);
		END_IF
	E_Status.RUNNING:
		G_ControlBox.bRunning := TRUE;
		G_ControlBox.bStopping := FALSE;
		IF G_ControlBox.bStop OR NOT(G_ControlBox.bAuto OR G_ControlBox.bManual) THEN
			G_ControlBox.eStatus := E_Status.STOPPING;
		END_IF
		IF NOT(G_ControlBox.bStart) AND G_ControlBox.bAuto AND (G_ControlBox.bAuto OR G_ControlBox.bManual) THEN
			G_ControlBox.eStatus := E_Status.STOPPING;
		END_IF
		IF G_ControlBox.bFault THEN // FAULT 
			G_ControlBox.eStatus := E_Status.FAULT;
		END_IF
	E_Status.STOPPING:
		G_ControlBox.bRunning := FALSE;
		G_ControlBox.bStopping := TRUE;
		
		G_ControlBox.bStartTimer := TRUE;
		G_ControlBox.fbTon(IN:=G_ControlBox.bStartTimer, PT:=T#2S, Q => G_ControlBox.bTimerDone,);
		G_ControlBox.bStartTimer := FALSE;
		G_ControlBox.bRunning := FALSE;
		IF G_ControlBox.bTimerDone THEN
			G_ControlBox.eStatus := E_Status.NOTREADY;
			G_ControlBox.fbTon(IN:=G_ControlBox.bStartTimer, PT:=T#2S, Q => G_ControlBox.bTimerDone);
		END_IF
	E_Status.FAULT:
		IF G_ControlBox.bFault THEN
			G_ControlBox.eStatus := E_Status.FAULT;
			G_ControlBox.bRunning := FALSE;
		ELSE
			G_ControlBox.eStatus := E_Status.NOTREADY;	
		END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>