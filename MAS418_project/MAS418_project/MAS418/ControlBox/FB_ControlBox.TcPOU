<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_ControlBox" Id="{4cfcb7b4-a156-4619-af4f-632ef49bc277}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ControlBox
VAR_INPUT
	bRealControlBox : BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	fbVirtualControlBox : FB_Virtual_Controller;
	fbRealControlBox : FB_Real_Controller;
	fbSelectedControlBox : I_ControlBox := fbVirtualControlBox;
	
	// Open Loop velocity control manual mode
	fb_OL_VC_winch_manual : OL_VC;
	fb_OL_VC_cyl_manual : OL_VC;
	
	// Closed Loop position control auto mode
	fb_OL_VC_winch_auto : OL_VC;
	fb_OL_VC_cyl_auto : OL_VC;
	
	fb_CL_PC_winch_auto : CL_PC;
	fb_CL_PC_cyl_auto : CL_PC;
	
	// Path generator
	fbTon : TON;
	fbPathGen : FB_PathGenerator;
	
	fbConnect : FB_Connect;
	fbNormalizeJoyX : FB_JoystickInputScaling;
	fbNormalizeJoyY : FB_JoystickInputScaling;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bRealControlBox THEN
	fbSelectedControlBox := fbRealControlBox;
	fbConnect();
ELSE
	fbVirtualControlBox.Sim();
END_IF

// Run mode and status function blocks in selected controlbox
fbSelectedControlBox.Mode();
fbSelectedControlBox.Status();

// Normalize joystick input to -1,1
(*fbSelectedControlBox.Joy_Normalized(fJoyX_raw := G_ControlBox.fJoyX, fJoyY_raw := G_ControlBox.fJoyY,
									fMin_in := G_IO_Parameters.fMinInputValue, fMax_in := G_IO_Parameters.fMaxInputValue,
									fMin_out := G_IO_Parameters.fMinOutputValue, fMax_out := G_IO_Parameters.fMaxOutputValue,
									fJoyX_normalized => G_ControlBox.fJoyX_Normalized, fJoyY_normalized => G_ControlBox.fJoyY_Normalized);
*)	
fbNormalizeJoyX(bEnable:=TRUE, nRawInput:= G_Input.n_JoyX, fNormalizedOutput => G_ControlBox.fJoyX_Normalized);
fbNormalizeJoyY(bEnable:=TRUE, nRawInput:= G_Input.n_JoyY, fNormalizedOutput => G_ControlBox.fJoyY_Normalized);

// Manual mode
// Run Open-Loop control for either winch or cylinder based on input, saturated to -0.05,0.05 m/s					
fb_OL_VC_winch_manual(bEnable:=(G_ControlBox.bRunning AND G_ControlBox.bJoyActive AND G_ControlBox.bManual), 
								fvRef:=G_IO_Parameters.fMaxVel*G_ControlBox.fJoyY_Normalized, 
								fQmax:=G_IO_Parameters.fQmax_winch, 
								f_uVFF => G_ControlBox.f_uVFF_winch_manual);
								
fb_OL_VC_cyl_manual(bEnable:=(G_ControlBox.bRunning AND NOT G_ControlBox.bJoyActive AND G_ControlBox.bManual), 
							  fvRef:=G_IO_Parameters.fMaxVel*G_ControlBox.fJoyX_Normalized, 
							  fQmax:=G_IO_Parameters.fQmax_cyl, 
							  f_uVFF => G_ControlBox.f_uVFF_cyl_manual);

// Auto mode
//Timer for path generator
fbTon(IN := G_PathGen.tStart,
	PT := G_PathGen.tPT,
	Q => G_PathGen.tQ,
	ET => G_PathGen.tVaiable);

G_PathGen.fTime := TIME_TO_LREAL(G_PathGen.tVaiable)/1000;

// Path generator function block
fbPathGen(Enable := (G_ControlBox.bAuto AND G_ControlBox.bRunning),
	x0m := G_PathGen.x0,
	v0ms := G_PathGen.v0,
	Position_SPm := G_PathGen.Position_SP,
	Velocity_SPms := G_PathGen.Velocity_SP,
	t0s := G_PathGen.t0,
	tRamps := G_PathGen.tRamp,
	tHoldPoss := G_PathGen.tHoldPos,
	t := G_PathGen.fTime,
	PositionRefm => G_PathGen.fPositionRef,
	VelocityRefms => G_PathGen.fVelocityRef,
	TimeTot => G_PathGen.fTimeTot,
	Error => G_PathGen.fError);

// Open-Loop function blocks for winch and cylinder in auto mode
fb_OL_VC_winch_auto(bEnable:=(G_ControlBox.bRunning AND G_ControlBox.bJoyActive AND G_ControlBox.bAuto), 
							  fvRef:=G_PathGen.fVelocityRef, 
							  fQmax:=G_IO_Parameters.fQmax_winch, 
							  f_uVFF => G_ControlBox.f_uVFF_winch_auto);
							  
fb_OL_VC_cyl_auto(bEnable:=(G_ControlBox.bRunning AND NOT G_ControlBox.bJoyActive AND G_ControlBox.bAuto), 
							fvRef:=G_PathGen.fVelocityRef, 
							fQmax:=G_IO_Parameters.fQmax_cyl, 
							f_uVFF => G_ControlBox.f_uVFF_cyl_auto);

// Closed-Loop function blocks for winch ander cylinder in auto mode
fb_CL_PC_winch_auto(bEnable:=(G_ControlBox.bRunning AND G_ControlBox.bJoyActive AND G_ControlBox.bAuto), 
							  fProportionalGain:=G_ControlBox.fPGain, 
							  fPositionReference:=G_PathGen.fPositionRef, 
							  fPositionFeedback:=G_ControlBox.fPositionFeedback_winch, 
							  uPFB => G_ControlBox.f_uPFB_winch_auto);
							  
fb_CL_PC_cyl_auto(bEnable:=(G_ControlBox.bRunning AND NOT G_ControlBox.bJoyActive AND G_ControlBox.bAuto), 
							fProportionalGain:=G_ControlBox.fPGain, 
							fPositionReference:=G_PathGen.fPositionRef, 
							fPositionFeedback:=G_ControlBox.fPositionFeedback_cyl, 
							uPFB => G_ControlBox.f_uPFB_cyl_auto);

// Calculate summed control signals for winch and cylinder
IF G_ControlBox.f_uVFF_winch_auto + G_ControlBox.f_uPFB_winch_auto >= 1 THEN
	G_ControlBox.f_u_winch := 1;
ELSIF G_ControlBox.f_uVFF_winch_auto + G_ControlBox.f_uPFB_winch_auto <= -1 THEN
	G_ControlBox.f_u_winch := -1;
ELSE
	G_ControlBox.f_u_winch := G_ControlBox.f_uVFF_winch_auto + G_ControlBox.f_uPFB_winch_auto;
END_IF

IF G_ControlBox.f_uVFF_cyl_auto + G_ControlBox.f_uPFB_cyl_auto >= 1 THEN
	G_ControlBox.f_u_cyl := 1;
ELSIF G_ControlBox.f_uVFF_cyl_auto + G_ControlBox.f_uPFB_cyl_auto <= -1 THEN
	G_ControlBox.f_u_cyl := G_ControlBox.f_uVFF_cyl_auto + G_ControlBox.f_uPFB_cyl_auto;
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>